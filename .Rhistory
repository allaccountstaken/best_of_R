pbinom(q=1, size=5, prob=0.6)
x =  pbinom(q=1, size=5, prob=0.6)
x
?dnorm
?dt
?dbeta
qnorm(2, 2, 30)
qnorm(2, 2, 3)
qnorm(1, 2, 3)
qnorm(1, 20, 3)
qnorm(1.5, 2, 3)
!qnorm
?qnorm
qnorm(0.5)
qnorm(0.4445)
pnorm(0.4444)
bbinom(1, 5, 0.6)
pbinom(1, 5, 0.6)
ppois(1, 3)
ppois(3, 1)
1 - ppois((1, 3))
1 - ppois(1, 3)
pgamma(2, 1/3)
?pgamma
pgamma(2, 1/3, lower.tail = 0.5)
1 - pgamma(2, 1/3, lower.tail = 0.5)
pnorm(0.975)
pnorm(0.975, 0, 1)
qnorm(0.975, 0, 1)
trees
help(trees)
pairs(trees, panel = panel.smooth, main = "trees data")
plot(Volume ~ Girth, data = trees, log = "xy")
hist(Girth)
treers
trees
attach(trees)
names(trees)
hist(Girth)
pairs(trees)
seq(from=0.1, to=0.9, by=0.27)
seq(from=0.1, to=0.9, by=0.2)
seq(from=0.1, to=0.9, by=0.1)
theta = seq(from=0.1, to=0.9, by=0.1)
plot(theta)
pbinom(q=1, size=5, prob=0.6)
pqnom(0.087, 5, 0.6)
qbinom(p=0.087, size=5, prob=0.6)
qbinom(p=0.08, size=5, prob=0.6)
qbinom(p=0.08, size=5, prob=0.67)
qbinom(p=0.08, size=5, prob=0.4)
pbinom(0.087, 5, 0.6)
pbinom(1, 5, 0.6)
qbinom(0.87, 5, 06)
qbinom(0.87, 5, 0.6)
theta=seq(from=0,to=1,by=.01)
theta
plot(theta,dbeta(theta,1,1),type="l")
plot(theta,dbeta(theta,4,2),type="l")
plot(theta,dbeta(theta,8,4),type="l")
plot(theta,dbeta(theta,1,1),type="l")
plot(theta,dbeta(theta,4,2),type="l")
1-pbeata(0.25, 4, 2)
1-pbeta(0.25, 4, 2)
1-pbeta(0.25, 8, 4)
1-pbeta(0.5, 8, 4)
1-pbeta(0.8, 8, 4)
dbeta(theta, 41, 11)
plot(theta, dbeta(theta, 41, 11))
41/(41+11)
x = 100
y = 2
x/y
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
ggplot2::mpg
library(r-tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(tidyverse)
ggplot2::ggplot()
ggplot2::mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?geom_smooth
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = dimonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
x <- 10
x
x y <- 10
x y <- 10
print(paste("Female CI: [", CI_females_lower,",", CI_females_upper, "]"))
library(tidyverse)
df = read.table("data/students.txt", header=TRUE)
head(df)
# 2. How many students are there in the dataset?
# Number of rows is given by the first dimension of dim()
dim(df)[1]
# 3. How many students are missing entry in the last 2 columns?
df[!complete.cases(Data), -2]
apply(df[, c(6,7,8,9)], 2, median)
# 5. Report the mean and standard deviation of StudyHrs for female and male students
# Use tapply() with group by df$Gender first for median and then for std.
mean_females <- tapply(df$StudyHrs, df$Gender, mean, na.rm=T)[1]
sd_females <- tapply(df$StudyHrs, df$Gender, sd, na.rm=T)[1]
sd_males <- tapply(df$StudyHrs, df$Gender, sd, na.rm=T)[2]
print(paste("Male mean:", mean_males, "-- Male std:", sd_males))
# 6. Construct a 95% confidence interval for the mean StudyHrs for female/male students
# Is there evidence that the means are different? -- Probably, not, as males are in females CI
#First, get CI for females, i.e sample mean +/- margin of error, z*sigma/n
n_females <- count(filter(df, Gender=="female"))
# 6. Construct a 95% confidence interval for the mean StudyHrs for female/male students
# Is there evidence that the means are different? -- Probably, not, as males are in females CI
#First, get CI for females, i.e sample mean +/- margin of error, z*sigma/n
n_females <- count(filter(df, Gender=="female"))
CI_females_upper = mean_females + (qnorm(1-((1-0.95)/2))*sd_females)/sqrt(n_females)
CI_females_lower = mean_females - (qnorm(1-((1-0.95)/2))*sd_females)/sqrt(n_females)
print(paste("Female CI: [", CI_females_lower,",", CI_females_upper, "]"))
# 5. Report the mean and standard deviation of StudyHrs for female and male students
# Use tapply() with group by df$Gender first for median and then for std.
mean_females <- tapply(df$StudyHrs, df$Gender, mean, na.rm=T)[1]
#First, compute critical t and check if we need to pool variances
t_critical <- qt(0.975, 247)
F_stat <- sd_males**2 / sd_females**2
F_stat < t_critical # TRUE => pool variances
# Compute pooled variance
s_pooled <- sqrt(((n_females-1)*(sd_females)**2 + (n_males-1)*(sd_males))/247)
mean_diff <- mean_females-mean_males
CI_diff_lower <- mean_diff - t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
CI_diff_upper <- mean_diff + t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
print(paste("Difference of mean CI contains zero: [", CI_diff_lower,",", CI_diff_upper, "]"))
library(tidyverse)
df = read.table("data/students.txt", header=TRUE)
head(df)
# 1. Variable that is not a part of any meaningful analysis?
#Remove column Student ID or index?
# 2. How many students are there in the dataset?
# Number of rows is given by the first dimension of dim()
dim(df)[1]
# 3. How many students are missing entry in the last 2 columns?
df[!complete.cases(Data), -2]
# 4. Report the median values of the numeric variables.
# First, check where numeric columns are. Second, use apply() to get the medians
head(df)
apply(df[, c(6,7,8,9)], 2, median)
# 5. Report the mean and standard deviation of StudyHrs for female and male students
# Use tapply() with group by df$Gender first for median and then for std.
mean_females <- tapply(df$StudyHrs, df$Gender, mean, na.rm=T)[1]
mean_males <- tapply(df$StudyHrs, df$Gender, mean, na.rm=T)[2]
sd_females <- tapply(df$StudyHrs, df$Gender, sd, na.rm=T)[1]
sd_males <- tapply(df$StudyHrs, df$Gender, sd, na.rm=T)[2]
print(paste("Female mean:", mean_females, "-- Female std:", sd_females))
print(paste("Male mean:", mean_males, "-- Male std:", sd_males))
# 6. Construct a 95% confidence interval for the mean StudyHrs for female/male students
# Is there evidence that the means are different? -- Probably, not, as males are in females CI
#First, get CI for females, i.e sample mean +/- margin of error, z*sigma/n
n_females <- count(filter(df, Gender=="female"))
CI_females_upper = mean_females + (qnorm(1-((1-0.95)/2))*sd_females)/sqrt(n_females)
CI_females_lower = mean_females - (qnorm(1-((1-0.95)/2))*sd_females)/sqrt(n_females)
print(paste("Female CI: [", CI_females_lower,",", CI_females_upper, "]"))
#Same for males:
n_males <- count(filter(df, Gender=="male"))
CI_males_upper = mean_males + (qnorm(1-((1-0.95)/2))*sd_males)/sqrt(n_males)
CI_males_lower = mean_males - (qnorm(1-((1-0.95)/2))*sd_males)/sqrt(n_males)
print(paste("Male CI: [", CI_males_lower,",", CI_males_upper, "]"))
#Second, look if the difference of the means is statistically significant,
#assuming independent samples, and NOT a matched pair interval:
#First, compute critical t and check if we need to pool variances
t_critical <- qt(0.975, 247)
F_stat <- sd_males**2 / sd_females**2
F_stat < t_critical # TRUE => pool variances
# Compute pooled variance
s_pooled <- sqrt(((n_females-1)*(sd_females)**2 + (n_males-1)*(sd_males))/247)
mean_diff <- mean_females-mean_males
CI_diff_lower <- mean_diff - t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
CI_diff_upper <- mean_diff + t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
print(paste("Difference of mean CI contains zero: [", CI_diff_lower,",", CI_diff_upper, "]"))
setwd("~/")
setwd("~/Documents/learn/uva/fall2021/STAT6021/best_of_R")
library(tidyverse)
df = read.table("data/students.txt", header=TRUE)
head(df)
# 1. Variable that is not a part of any meaningful analysis?
#Remove column Student ID or index?
# 2. How many students are there in the dataset?
# Number of rows is given by the first dimension of dim()
dim(df)[1]
# 3. How many students are missing entry in the last 2 columns?
df[!complete.cases(Data), -2]
# 4. Report the median values of the numeric variables.
# First, check where numeric columns are. Second, use apply() to get the medians
head(df)
apply(df[, c(6,7,8,9)], 2, median)
# 5. Report the mean and standard deviation of StudyHrs for female and male students
# Use tapply() with group by df$Gender first for median and then for std.
mean_females <- tapply(df$StudyHrs, df$Gender, mean, na.rm=T)[1]
mean_males <- tapply(df$StudyHrs, df$Gender, mean, na.rm=T)[2]
sd_females <- tapply(df$StudyHrs, df$Gender, sd, na.rm=T)[1]
sd_males <- tapply(df$StudyHrs, df$Gender, sd, na.rm=T)[2]
print(paste("Female mean:", mean_females, "-- Female std:", sd_females))
print(paste("Male mean:", mean_males, "-- Male std:", sd_males))
# 6. Construct a 95% confidence interval for the mean StudyHrs for female/male students
# Is there evidence that the means are different? -- Probably, not, as males are in females CI
#First, get CI for females, i.e sample mean +/- margin of error, z*sigma/n
n_females <- count(filter(df, Gender=="female"))
CI_females_upper = mean_females + (qnorm(1-((1-0.95)/2))*sd_females)/sqrt(n_females)
CI_females_lower = mean_females - (qnorm(1-((1-0.95)/2))*sd_females)/sqrt(n_females)
print(paste("Female CI: [", CI_females_lower,",", CI_females_upper, "]"))
#Same for males:
n_males <- count(filter(df, Gender=="male"))
CI_males_upper = mean_males + (qnorm(1-((1-0.95)/2))*sd_males)/sqrt(n_males)
CI_males_lower = mean_males - (qnorm(1-((1-0.95)/2))*sd_males)/sqrt(n_males)
print(paste("Male CI: [", CI_males_lower,",", CI_males_upper, "]"))
#Second, look if the difference of the means is statistically significant,
#assuming independent samples, and NOT a matched pair interval:
#First, compute critical t and check if we need to pool variances
t_critical <- qt(0.975, 247)
F_stat <- sd_males**2 / sd_females**2
F_stat < t_critical # TRUE => pool variances
# Compute pooled variance
s_pooled <- sqrt(((n_females-1)*(sd_females)**2 + (n_males-1)*(sd_males))/247)
mean_diff <- mean_females-mean_males
CI_diff_lower <- mean_diff - t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
CI_diff_upper <- mean_diff + t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
print(paste("Difference of mean CI contains zero: [", CI_diff_lower,",", CI_diff_upper, "]"))
#First, compute critical t and check if we need to pool variances
t_critical <- qt(0.975, 247)
F_stat <- sd_males**2 / sd_females**2
F_stat < t_critical # TRUE => pool variances
# Compute pooled variance
s_pooled <- sqrt(((n_females-1)*(sd_females)**2 + (n_males-1)*(sd_males))/247)
mean_diff <- mean_females-mean_males
CI_diff_lower <- mean_diff - t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
CI_diff_upper <- mean_diff + t_critical * s_pooled* sqrt(1/n_females + 1/n_males)
# Compute pooled variance
s_pooled <- sqrt(((n_females-1)*(sd_females)**2 + (n_males-1)*(sd_males))/247)
df = read.table("data/students.txt", header=TRUE)
df = read.table("data/students.txt", header=TRUE)
head(df)
# 2. How many students are there in the dataset?
# Number of rows is given by the first dimension of dim()
dim(df)[1]
# 7. Compare the median StudyHrs across genders and Smoke
library(dplyr)
df%>%
group_by(Gender=Gender, Smoker=Smoke)%>%
summarise(medHours=median(StudyHrs, na.rm=T))
# 8. Create a new variable PartyAnimal which takes "yes" if PartyNum > 8, "no" otherwise
df <- df %>%
mutate(PartyAnimal = ifelse(PartyNum>8, "Yes", "No"))
# 9. Create a new variable GPA.cat: low<3.0, moderate<3.5, high>3.5
df <- df %>%
mutate(GPA.cat = cut(GPA, breaks=c(-Inf, 3, 3.5, Inf),
labels=c("low", "moderate", "high")))
write.csv(Data, file="data/newdata.csv", row.names = TRUE)
dim(selected_data)[1]
selected_data <- df %>%
filter(GPA.cat=="low" & PartyAnimal=="Yes" & StudyHrs < 15)
dim(selected_data)[1]
dim(selected_data)
head(df)
# 9. Create a new variable GPA.cat: low<3.0, moderate<3.5, high>3.5
df <- df %>%
mutate(GPA.cat = cut(GPA, breaks=c(-Inf, 2.9999, 3.5, Inf),
labels=c("low", "moderate", "high")))
# 9. Create a new variable GPA.cat: low<3.0, moderate<3.5, high>3.5
df <- df %>%
mutate(GPA.cat = cut(GPA, breaks=c(-Inf, 2.9999, 3.4999, Inf),
labels=c("low", "moderate", "high")))
# 8. Create a new variable PartyAnimal which takes "yes" if PartyNum > 8, "no" otherwise
df <- df %>%
mutate(PartyAnimal = ifelse(PartyNum>8, "Yes", "No"))
# 9. Create a new variable GPA.cat: low<3.0, moderate<3.5, high>3.5
df <- df %>%
mutate(GPA.cat = cut(GPA, breaks=c(-Inf, 2.9999, 3.4999, Inf),
labels=c("low", "moderate", "high")))
selected_data <- df %>%
filter(GPA.cat=="low" & PartyAnimal=="Yes" & StudyHrs < 15)
dim(selected_data)
# 3. How many students are missing entry in the last 2 columns?
df[!complete.cases(Data), -2]
library(tidyverse)
head(df)
# 2. How many students are there in the dataset?
# Number of rows is given by the first dimension of dim()
dim(df)[1]
# 3. How many students are missing entry in the last 2 columns?
df[!complete.cases(Data), -2]
# 3. How many students are missing entry in the last 2 columns?
df[!complete.cases(df), -2]
# 3. How many students are missing entry in the last 2 columns?
dim(df[!complete.cases(df), -2])
dim(df[!complete.cases(df),])
dim(df[!complete.cases(df),])[1]
